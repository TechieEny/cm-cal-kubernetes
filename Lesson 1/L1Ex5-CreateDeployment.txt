#-------------------------------
# Create a Deployment
#-------------------------------
cat << EOF >> ~/nginx-deployment.yaml 
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.7.9
        ports:
        - containerPort: 80
        env:
        - name: POD_NAME 
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
EOF

kubectl apply -f ~/nginx-deployment.yaml
kubectl get deployment

# Create adhoc deployment
kubectl create deployment hello-node --image=gcr.io/hello-minikube-zero-install/hello-node
kubectl get deployments

kubectl describe deployment nginx-deployment
-minReadySeconds can be set to allow resources to load before minReadySeconds
-RollingUpdateStrategy: meaning that when we’re updating the Deployment, we can 
                        have up to 1 missing pod before it’s replaced, and 1 maxSurge, 
                        meaning we can have one extra pod as we scale the new pods back up. 
-NewReplicaSet: The deployment is backed, in this case, by Replica Set

# Clean up
kubectl delete deployment nginx-deployment

# Metadata Exposure through Environment Variables
env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name

# Expost pod to outside network
kubectl expose deployment soaktest --port=80 --target-port=80 --type=NodePort

kubectl describe services soaktest
# Recover from Crashes
kubectl get pods

# Simulate crash by deleting container
kubectl delete pod soaktest-3869910569-x6vmp

# Scale in place
kubectl scale --replicas=7 deployment/soaktest
# Kubernetes isn’t going to scale the Deployment down to be below the level at which you first started it up.

# a Deployment controls all the pods with a tier value of dev, changing 
# a pod’s teir label to prod will remove it from the Deployment’s sphere of influence. 
kubectl describe deployment soaktest
kubectl describe replicaset soaktest-3869910569
# Get pods by label
kubectl get pods -l app=soaktest
# what if we wanted to add a new label? 
kubectl label pods soaktest-3869910569-xuhwl experimental=true
pod "soaktest-3869910569-xuhwl" labeled

# what if we wanted to change an existing label? 
kubectl label pods soaktest-3869910569-wje85 app=notsoaktest --overwrite

# REmoved pod from deployment
kubectl delete deployment soaktest
# Pod remains
kubectl get pods
#  easily replace all of the pods in a Deployment
kubectl label pods --all app=notsoaktesteither --overwrite

kubectl expose deployment hello-world --type=NodePort --name=example-service